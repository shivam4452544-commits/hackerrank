int downToZero(int n) {
    if (n == 0) return 0;

    // Queue for BFS
    int queue[1000005];
    int front = 0, rear = 0;

    // Distance array
    int dist[1000005];
    for (int i = 0; i <= n; i++) dist[i] = -1;

    // Start BFS from n
    queue[rear++] = n;
    dist[n] = 0;

    while (front < rear) {
        int curr = queue[front++];

        // If we reached 0, return answer
        if (curr == 0) return dist[curr];

        // Operation 1: decrease by 1
        if (dist[curr - 1] == -1) {
            dist[curr - 1] = dist[curr] + 1;
            queue[rear++] = curr - 1;
        }

        // Operation 2: factorization
        for (int i = 2; i * i <= curr; i++) {
            if (curr % i == 0) {
                int next = curr / i > i ? curr / i : i;
                if (dist[next] == -1) {
                    dist[next] = dist[curr] + 1;
                    queue[rear++] = next;
                }
            }
        }
    }

    return -1; // should never happen
}
